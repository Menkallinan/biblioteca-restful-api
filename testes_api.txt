Testes para API - post

1) Listar livros quando não há nenhum cadastrado
   - Método: GET
   - URL: http://127.0.0.1:8080/livros
   - Body: nenhum
   - Esperado: 200 OK
     []

2) Criar livro válido
   - Método: POST
   - URL: http://127.0.0.1:8080/livros
   - Headers:
       Content-Type: application/json
   - Body:
     {
       "nome": "Dom Quixote",
       "autor": "Miguel de Cervantes",
       "edicao": 1,
       "idioma": "Português"
     }
   - Esperado: 201 Created
     { "id": 1 }

3) Buscar livro criado
   - Método: GET
   - URL: http://127.0.0.1:8080/livros/1
   - Body: nenhum
   - Esperado: 200 OK
     {
       "id": 1,
       "nome": "Dom Quixote",
       "autor": "Miguel de Cervantes",
       "edicao": 1,
       "idioma": "Português"
     }

4) Buscar livro que não existe
   - Método: GET
   - URL: http://127.0.0.1:8080/livros/999
   - Body: nenhum
   - Esperado: 404 Not Found
     { "erro": "Livro não encontrado." }

5) Criar livro com dados inválidos
   - Método: POST
   - URL: http://127.0.0.1:8080/livros
   - Headers:
       Content-Type: application/json
   - Body:
     {
       "nome": "Test",
       "autor": "",
       "edicao": -1,
       "idioma": ""
     }
   - Esperado: 400 Bad Request
     { "erro": "Campo 'autor' inválido. Deve ser uma string não vazia." }

6) Atualizar livro existente
   - Método: PUT
   - URL: http://127.0.0.1:8080/livros/1
   - Headers:
       Content-Type: application/json
   - Body:
     {
       "nome": "Dom Quixote - Edição Atualizada",
       "autor": "Miguel de Cervantes",
       "edicao": 2,
       "idioma": "Português"
     }
   - Esperado: 200 OK
     { "mensagem": "Livro atualizado com sucesso." }

7) Deletar livro existente
   - Método: DELETE
   - URL: http://127.0.0.1:8080/livros/1
   - Body: nenhum
   - Esperado: 200 OK
     { "mensagem": "Livro deletado com sucesso." }

8) Deletar livro que não existe
   - Método: DELETE
   - URL: http://127.0.0.1:8080/livros/999
   - Body: nenhum
   - Esperado: 404 Not Found
     { "erro": "Livro não encontrado." }

9) Criar empréstimo válido
   - Método: POST
   - URL: http://127.0.0.1:8080/emprestimos
   - Headers:
       Content-Type: application/json
   - Body:
     {
       "livro_id": 1,
       "usuario": "joao.silva",
       "data_emprestimo": "2025-06-05",
       "data_devolucao": "2025-06-19"
     }
   - Esperado: 201 Created
     { "id": 1 }

10) Criar empréstimo com livro_id inválido
    - Método: POST
    - URL: http://127.0.0.1:8080/emprestimos
    - Headers:
        Content-Type: application/json
    - Body:
      {
        "livro_id": 999,
        "usuario": "joao.silva",
        "data_emprestimo": "2025-06-05",
        "data_devolucao": "2025-06-19"
      }
    - Esperado: 400 Bad Request
      { "erro": "Livro com id 999 não encontrado." }

11) Listar empréstimos
    - Método: GET
    - URL: http://127.0.0.1:8080/emprestimos
    - Body: nenhum
    - Esperado: 200 OK
      [
        {
          "id": 1,
          "livro_id": 1,
          "usuario": "joao.silva",
          "data_emprestimo": "2025-06-05",
          "data_devolucao": "2025-06-19"
        }
      ]

12) Buscar empréstimo inexistente
    - Método: GET
    - URL: http://127.0.0.1:8080/emprestimos/999
    - Body: nenhum
    - Esperado: 404 Not Found
      { "erro": "Empréstimo não encontrado." }
